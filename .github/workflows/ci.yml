name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CONTAINER_NAME: api_beer
  IMAGE_NAME: enyajump/api-beer
  PORT: 40000

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js from `.nvmrc`
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          # cache: 'pnpm'

      - name: Install dependencies & Build
        run: |
          corepack enable
          pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Run Tests
        run: pnpm run --if-present test

      - name: Run Build
        run: pnpm run build

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Server Start
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          script: |
            # echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            # docker rmi $(docker images | grep "${{ env.IMAGE_NAME }}" | awk '{print $3}')
            docker pull ${{ steps.meta.outputs.tags }}
            docker stop ${{ env.CONTAINER_NAME }} || echo "stop [${{ env.CONTAINER_NAME}}] error"
            docker rm ${{ env.CONTAINER_NAME }} || echo "rm [${{ env.CONTAINER_NAME}}] error"
            docker run -e DATABASE_URL="${{ secrets.DATABASE_URL }}" -d -p ${{ env.PORT }}:3000 --name ${{ env.CONTAINER_NAME }} -it ${{ steps.meta.outputs.tags }}
            docker rmi $(docker images | grep "${{ env.IMAGE_NAME }}" | awk '{print $3}')
