// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  username          String              @unique
  email             String              @unique
  avatar            String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  password          Password?
  ProjectMember     ProjectMember[]
  TeamMember        TeamMember[]
  VisitedHisotry    VisitedHisotry[]
  ProjectCollection ProjectCollection[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String       @id @default(cuid())
  name        String       @default("") @db.VarChar(100)
  description String       @default("") @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  projects    Project[]
}

model TeamMember {
  id     String       @id @default(cuid())
  role   Role
  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  status InviteStatus @default(Success)

  @@unique([userId, teamId])
}

model Project {
  id                String              @id @default(cuid())
  name              String              @db.VarChar(50)
  description       String              @db.VarChar(255)
  visibility        ProjectVisibility   @default(PRIVATE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  members           ProjectMember[]
  apis              Api[]
  teamId            String
  Team              Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  collections       Collection[]
  VisitedHisotry    VisitedHisotry[]
  ProjectCollection ProjectCollection[]
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model ProjectCollection {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model ProjectMember {
  id        String  @id @default(cuid())
  role      Role
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

enum Role {
  Owner
  Maintainer
  Developer
  Viewer
}

enum InviteStatus {
  Pending
  Success
  Reject
}

model Collection {
  id        String       @id @default(cuid())
  pid       String?
  name      String
  order     Int
  createdAt DateTime     @default(now()) @db.Timestamp(3)
  updatedAt DateTime     @updatedAt @db.Timestamp(3)
  parent    Collection?  @relation("CollectionChildParent", fields: [pid], references: [id])
  children  Collection[] @relation("CollectionChildParent")
  projectId String
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  apis      Api[]
}

model Api {
  id                 String      @id @default(cuid())
  name               String      @default("") @db.VarChar(100)
  description        String      @default("") @db.VarChar(255)
  endpoint           String      @db.VarChar(255)
  method             ApiMethod
  params             Json
  body               Json
  headers            Json
  authorization      Json
  preRequestScript   String      @default("")
  postResponseScript String      @default("")
  tags               Json
  versions           Json
  order              Int
  status             ApiStatus   @default(DRAFT)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  projectId          String
  project            Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  collectionId       String?
  collection         Collection? @relation(fields: [collectionId], references: [id])
}

// refs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
enum ApiMethod {
  GET
  PUT
  DELETE
  POST
  HEAD
  CONNECT
  OPTIONS
  TRACE
  PATCH
  CUSTOM
}

enum ApiStatus {
  DRAFT
  PUBLISHED
}

model VisitedHisotry {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      String  @default("")
}
