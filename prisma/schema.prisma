// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  email         String          @unique
  avatar        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  password      Password?
  ProjectMember ProjectMember[]
  TeamMember    TeamMember[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String            @id @default(cuid())
  name        String            @db.VarChar(50)
  description String            @db.VarChar(255)
  visibility  ProjectVisibility @default(PRIVATE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     ProjectMember[]
  apis        Api[]

  // teamId      String
  // Team        Team              @relation(fields: [teamId], references: [id])
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model ProjectMember {
  id        String  @id @default(cuid())
  role      Role
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

enum Role {
  Owner
  Maintainer
  Developer
  Viewer
}

model Api {
  id                 String    @id @default(cuid())
  name               String    @default("") @db.VarChar(100)
  description        String    @default("") @db.VarChar(255)
  endpoint           String    @db.VarChar(255)
  method             ApiMethod
  params             Json
  body               Json
  headers            Json
  authorization      Json
  preRequestScript   String    @default("")
  postResponseScript String    @default("")
  tags               Json
  versions           Json
  order              Int
  status             ApiStatus @default(DRAFT)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  projectId          String
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  // TODO: Add Collection
}

// refs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
enum ApiMethod {
  GET
  PUT
  DELETE
  POST
  HEAD
  CONNECT
  OPTIONS
  TRACE
  PATCH
  CUSTOM
}

enum ApiStatus {
  DRAFT
  PUBLISHED
}

model Team {
  id          String       @id @default(cuid())
  name        String       @default("") @db.VarChar(100)
  description String       @default("") @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  // projects    Project[]
}

model TeamMember {
  id     String @id @default(cuid())
  role   Role
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}
